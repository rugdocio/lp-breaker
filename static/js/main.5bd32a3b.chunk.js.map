{"version":3,"sources":["components/LPInput.js","hooks/useWeb3.js","contexts/web3Context.js","config/constants/contracts.js","utils/addressHelper.js","config/index.js","utils/contractHelper.js","actions/approve.js","actions/breakLp.js","actions/getName.js","App.js","reportWebVitals.js","index.js"],"names":["Search","Input","LPInput","props","onStart","disabled","placeholder","allowClear","enterButton","size","onSearch","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","useWeb3","useState","provider","setProvider","web3","undefined","chainId","web3info","setWeb3Info","useEffect","a","connect","provider_","Web3","eth","getChainId","on","chainId_","console","log","networkId","then","info","Web3Context","createContext","contracts","lpBreaker","getLpBreakerAddress","address","getAddress","getDefaultGasPrice","toBN","utils","gasPrices","mul","pow","getGasPrice","getContract","abi","Contract","gasPrice","toString","getLpBreaker","lpBreakerAbi","getTokenContract","tokenAddress","tokenAbi","approve","config","tokenContract","methods","balanceOf","currentProvider","selectedAddress","call","amount","BN","send","from","tx","notification","open","message","error","errormsg","data","description","breakLp","lp","breakLP","getName","token0","token1","token0Contract","token1Contract","symbol","symbol0","symbol1","App","loading","setLoading","setDescription","doApprove","doBreak","doGetName","res","name","approved","Provider","value","className","style","color","ExperimentOutlined","fontSize","marginBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bd32a3b.chunk.js","sourcesContent":["import { Input } from \"antd\";\n\nconst { Search } = Input;\n\n// Masterchef input component that calls the injected onStart method with the masterchef address as parameter\nfunction LPInput(props) {\n  const { onStart, disabled } = props;\n  return (\n    <Search\n      placeholder=\"Enter LP token Address\"\n      allowClear\n      enterButton=\"Break\"\n      size=\"large\"\n      onSearch={onStart}\n      disabled={disabled}\n    />\n  );\n}\n\nexport default LPInput;\n","import { useEffect, useState } from \"react\";\n\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"5b7ed00b5a864d5797572f8cfcc5052e\", // required, TODO: still needs to be set to our infura_id.\n    },\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nconst useWeb3 = () => {\n  //todo: useWeb3Provider\n  const [provider, setProvider] = useState();\n  const [web3info, setWeb3Info] = useState({\n    web3: undefined,\n    chainId: undefined,\n  });\n  useEffect(() => {\n    const connect = async () => {\n      const provider_ = await web3Modal.connect();\n  \n      setProvider(provider_);\n      const web3 = new Web3(provider_);\n      const chainId = await  web3.eth.getChainId();\n\n      provider_.on(\"chainChanged\", async (chainId_) => {\n        console.log(\"changed\")\n        const networkId = await web3.eth.getChainId();\n        setWeb3Info({web3: web3, chainId: networkId});\n      });\n\n      return { web3, chainId };\n    };\n    connect().then((info) => {\n      setWeb3Info(info);\n    });\n  }, [provider]);\n\n  // const disconnect = async () => {\n  //   // explicitly close when wallet connect is used\n  //   if (provider && provider.close) {\n  //     await provider.close();\n  //   }\n  //   web3Modal.clearCachedProvider();\n\n  //   setProvider(undefined);\n  //   setWeb3Info(undefined);\n  // };\n\n  return web3info;\n};\n\nexport default useWeb3;\n","// Context to share the masterchef address state between components\n\nimport { createContext } from \"react\";\n\nconst Web3Context = createContext();\n\nexport default Web3Context;\n","// list of contracts\n// Fetcher: Helper contract that is essential for a chain to work. It fetches all the pool data and returns it in a single call\nconst contracts = {\n  lpBreaker: {\n    321: \"0x43bEa134Ce66fC4cf90d3afA4c2eBCD0aC2a1D43\", // KCC\n    137: \"0x9ad44b90415E2e1f4A37c7f7e2554ADeB2bad001\", // Polygon\n    56: \"0xC4833E1392966Df2E00d9e3Db8949749AEe6fB26\", // BSC\n    250: \"0x79533174aaD5bc99a34C583107cEC821bCF3B792\", // FTM\n    1285: \"0x43bEa134Ce66fC4cf90d3afA4c2eBCD0aC2a1D43\", // MOONRIVER\n    4689: \"0x0b7161d5dd0C85e8f072b7de076012CC9355F82C\", // IOTEX\n    43114: \"0x058Fb4e1cC479cCf4D9575d067880096BaC9bb97\", // AVAX\n    42220: \"0xC03B5b8F0A3969BbA580D5c6B939109451E66F4d\", // CELO\n    1666600000: \"0x17c01Db12958bADe0f0E2767df6f4127c12D6990\", // HARMONY shard zero\n    1284: \"0x0b7161d5dd0C85e8f072b7de076012CC9355F82C\", // Moonbeam\n    25: \"0xd9E61627600D2DECCF7fCCaE7aabcb3457Fa54FC\", // Cronos\n    2000: \"0x058Fb4e1cC479cCf4D9575d067880096BaC9bb97\"\n  },\n};\n\nexport default contracts\n","import { BSC_CHAIN_ID } from \"../config\";\nimport contracts from \"../config/constants/contracts\";\n\nexport const getAddress = (address, chainId) => {\n  return address[chainId] ? address[chainId] : address[BSC_CHAIN_ID];\n};\n\nexport const getLpBreakerAddress = (chainId) => {\n  return getAddress(contracts.lpBreaker, chainId);\n};\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n","export const BSC_CHAIN_ID = 56;\n","import lpBreakerAbi from \"../config/abi/lpBreaker.json\";\nimport tokenAbi from \"../config/abi/token.json\";\nimport { getLpBreakerAddress } from \"./addressHelper\";\n\nexport const getDefaultGasPrice = (web3, chainId) => {\n  const toBN = web3.utils.toBN;\n  const gasPrices = {\n    56: toBN(5).mul(toBN(10).pow(toBN(9))),\n    137: toBN(1).mul(toBN(10).pow(toBN(9))),\n    321: toBN(1).mul(toBN(10).pow(toBN(9))),\n    43114: toBN(225).mul(toBN(10).pow(toBN(9))),\n    250: toBN(100).mul(toBN(10).pow(toBN(9))),\n    1285: toBN(1).mul(toBN(10).pow(toBN(9))),\n    4689: toBN(1000).mul(toBN(10).pow(toBN(9))),\n    42220: toBN(1).mul(toBN(10).pow(toBN(9))),\n    1666600000: toBN(10).mul(toBN(10).pow(toBN(9))),\n  };\n\n  return chainId in gasPrices ? gasPrices[chainId] : 0;\n};\n\nexport const getGasPrice = (web3) => {\n  return web3.eth.getGasPrice();\n};\n\nconst getContract = (abi, address, web3, chainId) => {\n  if (web3 === undefined) {\n    return undefined;\n  }\n  return new web3.eth.Contract(abi, address, {\n    gasPrice: getDefaultGasPrice(web3, chainId).toString(),\n  });\n};\n\nexport const getLpBreaker = (web3, chainId) => {\n  if (\n    web3 === undefined ||\n    web3.eth === undefined\n  ) {\n    return undefined;\n  }\n  return getContract(lpBreakerAbi, getLpBreakerAddress(chainId, web3), web3, chainId);\n};\nexport const getTokenContract = (web3, chainId, tokenAddress) => {\n  if (\n    web3 === undefined ||\n    web3.eth === undefined ||\n    tokenAddress == null\n  ) {\n    return undefined;\n  }\n  return getContract(tokenAbi, tokenAddress, web3, chainId);\n};\n","import { notification } from \"antd\"\nimport { getDefaultGasPrice, getGasPrice, getTokenContract } from \"../utils/contractHelper\"\nimport { getLpBreakerAddress } from \"../utils/addressHelper\"\n\nconst approve = (web3, chainId, tokenAddress) => {\n    return async () => {\n        try {\n           let address = getLpBreakerAddress(chainId, web3);\n            let gasPrice = getDefaultGasPrice(web3, chainId);\n            try {\n                gasPrice = await getGasPrice(web3);\n            } catch {}\n            let config = {gasPrice: \"0\"}\n            if (chainId === 1285) {\n              config = {}\n            }\n            const tokenContract = getTokenContract(web3, chainId, tokenAddress)\n            const amount = await tokenContract.methods.balanceOf(web3.currentProvider.selectedAddress).call(config)\n            console.log(amount)\n            const tx = await tokenContract.methods.approve(address, new web3.utils.BN(amount)).send({\n                from: web3.currentProvider.selectedAddress,\n                gasPrice: gasPrice\n            })\n            console.log(\"executed \" + tx)\n\n            notification.open({\n                message: 'Transaction Succeeded'\n            })\n            return true;\n        } catch (e) {\n            console.error(e)\n            let errormsg = e.data\n            notification.open({\n                message: 'Transaction failed: Did you provide the LP token?',\n                description: errormsg\n\n            })\n            return false;\n        }\n    }\n}\nexport default approve","import { notification } from \"antd\"\nimport { getDefaultGasPrice, getGasPrice, getLpBreaker } from \"../utils/contractHelper\"\n\nconst breakLp = (web3, chainId, lp) => {\n    return async () => {\n        try {\n            let gasPrice = getDefaultGasPrice(web3, chainId);\n            try {\n                gasPrice = await getGasPrice(web3);\n            } catch {}\n            const lpBreaker = getLpBreaker(web3, chainId)\n            const tx = await lpBreaker.methods.breakLP(lp).send({\n                from: web3.currentProvider.selectedAddress,\n                gasPrice: gasPrice,\n            })\n            console.log(\"executed \" + tx)\n\n            notification.open({\n                message: 'Transaction Succeeded'\n            })\n            return tx\n        } catch (e) {\n            console.error(e)\n            let errormsg = e.data\n            notification.open({\n                message: 'Transaction failed',\n                description: errormsg\n\n            })\n        }\n    }\n}\nexport default breakLp","import { notification } from \"antd\"\nimport { getTokenContract } from \"../utils/contractHelper\"\n\nconst getName = (web3, chainId, tokenAddress) => {\n    return async () => {\n        try {\n            let config = {gasPrice: \"0\"}\n            if (chainId === 1285) {\n              config = {}\n            }\n            const tokenContract = getTokenContract(web3, chainId, tokenAddress)\n            const token0 = await tokenContract.methods.token0().call(config)\n            const token1 = await tokenContract.methods.token1().call(config)\n            try {\n                const token0Contract = getTokenContract(web3, chainId, token0)\n                const token1Contract = getTokenContract(web3, chainId, token1) \n                const symbol0 = await token0Contract.methods.symbol().call(config)\n                const symbol1 = await token1Contract.methods.symbol().call(config)\n                return [true, symbol0 + \"/\" + symbol1]\n            } catch (error) {\n                return [true, \"Unknown LP\"]\n            }\n        } catch (e) {\n            console.error(e)\n            let errormsg = e.data\n            notification.open({\n                message: 'Transaction failed: Did you provide the LP token?',\n                description: errormsg\n\n            })\n            return [false, \"\"];\n        }\n    }\n}\nexport default getName","import \"./App.css\";\nimport { Divider, Spin } from 'antd';\nimport LPInput from \"./components/LPInput\";\nimport useWeb3 from \"./hooks/useWeb3\";\nimport Web3Context from \"./contexts/web3Context\";\nimport approve from \"./actions/approve\";\nimport breakLp from \"./actions/breakLp\";\nimport { useState } from \"react\";\nimport getName from \"./actions/getName\";\nimport { ExperimentOutlined } from '@ant-design/icons';\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const { web3, chainId } = useWeb3();\n\n  const onStart = async (lp) => {\n    setLoading(true);\n    const doApprove = approve(\n      web3,\n      chainId,\n      lp\n    );\n    const doBreak = breakLp(\n      web3,\n      chainId,\n      lp\n    );\n    const doGetName = getName(\n      web3,\n      chainId,\n      lp\n    )\n    doGetName().then(([res, name])=> {\n      if (res) {\n        setDescription(\"Breaking \" + name + \"...\")\n        doApprove().then((approved) => {\n          if (approved) {\n            doBreak().then(() => {\n              setDescription(\"\");\n              setLoading(false);\n            });\n          } else {\n            setDescription(\"\");\n            setLoading(false);\n          }\n        });\n      } else {\n        setDescription(\"\");\n        setLoading(false);\n      }\n    });\n  };\n\n  return (\n    <Web3Context.Provider value={{ web3, chainId }} >\n      <div className=\"App\">\n        <LPInput onStart={onStart} disabled={loading} />\n        <Divider />\n\n        {description === \"\"? <h2 style={{ color: \"rgb(123, 208, 221)\" }}>Enter an LP address to break it back into its components</h2>: <h2 style={{ color: \"rgb(123, 208, 221)\" }}>{description}</h2>}\n        {loading ? <div><Spin /></div> : <></>}\n        <ExperimentOutlined style={{ fontSize: 70, marginBottom:\"40px\", color: \"#6d84a2\" }} />\n        <h3 style={{ color: \"#6d84a2\" }}>The LP breaker is experimental and provided as-is</h3>\n        <h3 style={{ color: \"#6d84a2\" }}>Use it as a last resort</h3>\n        <p/>\n        <p  style={{ color: \"#6d84a2\" }}>Make sure that you're connected to the correct network (Supported: BSC, Polygon, Avalanche, Fantom, DogeChain, Cronos, IOTEX, Moonriver, Celo, Harmony ONE, KCC and Moonbeam)</p>\n      </div>\n    </Web3Context.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}